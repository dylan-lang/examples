Configuration

  Any classes that are needed by the btrack but aren't part of the application
  itself (e.g., the JDBC driver jars) need to be put in an accessible location
  so that Tomcat will add them to its classpath when it starts up.  I have put
  the SQL Server jars in %TOMCAT_HOME%/lib/apps/ but they would probably work
  as well in btrack/WEB_INF/classes/.  The reason I don't put them in the latter
  is because I may deleted it and re-create it during development.


Page Design

  JSP pages use the .html extension, since there is no reason for users to 
  know what technology is being used behind the scenes.

  For each record type (account, bug, module, etc) when the user first enters
  the page for that record type, a list of existing records will be displayed.
  For most of the record types this will be a complete list.  For bug reports
  it will be the newest 100 records.  Then the user may click the name of an
  existing record to edit that record or they can click the "create new xxx"
  link to create a new record of that type.

  Having a uniform way of presenting all objects to the user will make the
  application easy to use.

  The pages that list records are called list-xxx.html.  These listing pages
  don't require login.

  The pages that edit or create records are called edit-xxx.html.  Rather than
  having URLs that link directly to edit-xxx.html they will link to a servlet
  named "xxx", which forces the user to login.  After login, if the user has
  the correct permissions to create/edit the record, they are redirected to
  the edit-xxx.html page where they may edit the record values.  The form is
  submitted back to the "xxx" servlet, which revalidates the user login and
  saves the record to the database.

  (If the user is not logged in when the form is posted, they will go to the
  login page and when login is successful and permissions are okay, the record
  will be saved.  They will receive acknowledgement of the save by being
  redirected to the list-xxx.html page, where the record will be listed, and
  there will be an ack message.)

  The edit/create page will be implemented with JavaBeans.  Each record class
  will double as a bean.  When the user clicks on a link to "xxx?id=n"
  the doGet method in the corresponding servlet will find the appropriate
  record and will stash it in the session under the name "edit-xxx" so that
  it may be retrieved with 
  <jsp:useBean id="edit-xxx" scope="session" class="sigue.btrack.xxx"/>.


Record class name             Fields added
-----------------             ------------
DatabaseRecord                (record_id)
  DatedRecord                 (mod_count, date_entered, date_modified)
    NamedRecord               (name)
      Account                 (password, email, etc)
      Browser                 ()
      OperatingSystem         ()
      Version                 ()
      OwnedRecord             (owner, description)
        Module                ()
        Product               ()
    Comment                   (bug_report_id, account_id, comment)
    Bug                       (...)
  LogRecord                   (date_entered, modified_by, description)


Severity descriptions:
Blocker  - Is preventing another team member from getting work done.
Critical - Causes data loss, crashes, hangs, leaks memory, etc.
Major    - A major feature of the system is broken.
Normal   - A bug/feature that should be fixed/implemented.
Minor    - Minor loss of function and there's an easy work-around.
Trivial  - A problem that can be easily worked around.
(Enhancement - Request for new feature or enhancement.)


Status descriptions:
  status             INTEGER NOT NULL,      -- new, investigating, fixed, not a bug, testing,
                                            --   reopened, verified, closed
New           - Just submitted.  Hasn't been dealt with in any way.
Investigating - DEV - The assigned developer is investigating the problem.
Open          - DEV - The assigned developer has
Fixed         - QA  - Development claims the bug is fixed.  QA to verify.
Not a bug     - QA  - Development claims it's not a bug.  QA to escalate or close.
Testing       - QA  - QA is testing the fix.
Reopened      - 


-------------------------------------------------
To do list

* Convert to JSP 1.2
  * Change flush="true" to flush="false" where appropriate.
* Change logs.
* E-mail management.
* Implement date_modified.
* Implement mod_count checking.
* Implement configuration file.
* Finish "basics".
  * Make all setters check for null and do nothing if null.
  * Ability to create/edit all aspects of all record types.
  * Ability to search for bugs based on summary and description only.
  * Login/logout in header.
  * Bug Tracker logo in header.
* Improve/fix the HTML, especially the edit-bug page.
* Use some kind of database field descriptors to be more data-driven.
* Use EJBs.  This should be done more or less atomically so that it can be
  compared to the non-EJB version.


--------------------------------------------------
Tags:

<!-- Get the ID of the current record, key defaults to "record" and class
     defaults to "DatabaseRecord" -->
<bt:record op="id"/>

<!-- Get the priority of the current bug, key defaults to "record". -->
<bt:record op="property" class="sigue.btrack.Bug"/>

<!-- Initialize an iteration over all Bug records. -->
<bt:record op="init_records" key="bugs" class="sigue.btrack.Bug"/>

<!-- Operate on the current iteration record. -->
<bt:record op="priority" key="bugs" class="sigue.btrack.Account" op="id"/>
<bt:record key="record" class="sigue.btrack.Account" op="id"/>
<bt:record key="record" class="sigue.btrack.Account" op="id"/>
