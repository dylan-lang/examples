module: assemblerdefine macro ant-subbrain-definer  { define ant-subbrain ?:name ?ant-states end }  =>  {    define function ?name(outer-instrs, label, current-counter) => ();      let instrs = make(<table>);      instrs[#"VARIABLES"] := outer-instrs[#"VARIABLES"]; // for now ###///shallow-copy(outer-instrs[#"VARIABLES"]);//      push-thunk(instrs, ?#"return-name", 0, curry(lookup, outer-instrs, label, current-counter + 1));      push-thunk(outer-instrs, label, current-counter, curry(lookup, instrs, ?#"name", 1));      let (label, counter) = values(?#"name", 0);      ?ant-states;    end function  }    ant-states:  { } => { }  { ?ant-state; ... }    => { let counter = counter + 1; ?ant-state; ... }  ant-state:  { Move ?success:expression ?failure:expression }  =>  {    curry(make, <move>,          state-success: curry(lookup, instrs, label, ?success),          state-failure: curry(lookup, instrs, label, ?failure))    }  end macro ant-subbrain-definer;define ant-subbrain test-ant-subbrain   Move 3 5;   Move 3 5;   Move 3 5;   Move 3 5;   Move 3 5;   Move 3 5end;