Since there is basically no internal state but the program counter on
this machine, there are only some ways of changing the current
strategy:

 * branching to a sub-strategy
 * returning to the sole caller of a sub-stategy

There can only be one call site for a strategy, since we have no way
to remember the program counter. Of course, we can always return to
multiple fixed locations, indicating a possibility to do
co-routines. But that really

So our code will look like this:

top-level-strategy
  sub-strategy
  sub-strategy
  sub-strategy
top-level-strategy
  sub-strategy
    sub-strategy
  sub-strategy
top-level-strategy
  sub-strategy


Both calling a strategy and returning from a strategy can be coupled
to a random event. So what we could do in testing is just keeping all
the top-level strategies we ever write, and just modify the
probabilities of the random events during optimization of ants.

In other words, our "genome" is a string of integer values, which
correspond to all parameters "p" in all Flip instructions.

Of course, we can always add random mutation to all instructions too,
if we have enough cycles to burn.

-- Andreas