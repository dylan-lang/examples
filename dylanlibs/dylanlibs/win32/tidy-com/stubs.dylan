Module: type-library-module
Creator: created from "D:\projects\libraries\tidy-com\type-library.spec" at 13:20 2000-11-12 New Zealand Daylight Time.


/* Type library: TidyCOM version 1.0
 * Description: TidyCOM 1.2.2 Type Library - Wraps W3C's HTML Tidy (version 
        4th August 2000) - Written by André Blavier
 * GUID: {C7D153E0-26A9-11D4-BD8A-915594DC902D}
 */


/* COM class: TidyObject version 0.0
 * GUID: {C7D153ED-26A9-11D4-BD8A-915594DC902D}
 * Description: TidyObject Class
 */
define constant $TidyObject-class-id = as(<REFCLSID>, 
        "{C7D153ED-26A9-11D4-BD8A-915594DC902D}");

define function make-TidyObject () => (default-interface :: <ITidyObject>, 
        interface-2 :: <ITidyOptions>)
  let default-interface = make(<ITidyObject>, class-id: 
        $TidyObject-class-id);
  values(default-interface,
         make(<ITidyOptions>, disp-interface: default-interface))
end function make-TidyObject;


/* Dispatch interface: ITidyObject version 0.0
 * GUID: {C7D153EC-26A9-11D4-BD8A-915594DC902D}
 * Description: ITidyObject Interface
 */
define dispatch-client <ITidyObject>
  uuid "{C7D153EC-26A9-11D4-BD8A-915594DC902D}";

  /* Tidy file - write output to memory */
  function ITidyObject/TidyToMem (arg-sourceFile :: <string>) => 
        (arg-result :: <string>), name: "TidyToMem", disp-id: 1;

  /* Tidy file - write output to file */
  function ITidyObject/TidyToFile (arg-sourceFile :: <string>, arg-destFile 
        :: <string>) => (), name: "TidyToFile", disp-id: 2;

  /* Tidy string - write output to memory */
  function ITidyObject/TidyMemToMem (arg-sourceStr :: <string>) => 
        (arg-result :: <string>), name: "TidyMemToMem", disp-id: 9;

  /* Number of warnings */
  constant property ITidyObject/TotalWarnings :: type-union(<integer>, 
        <machine-word>), name: "TotalWarnings", disp-id: 3;

  /* Number of errors */
  constant property ITidyObject/TotalErrors :: type-union(<integer>, 
        <machine-word>), name: "TotalErrors", disp-id: 4;

  /* Tidy's warning message */
  constant property ITidyObject/Warning (arg-i :: type-union(<integer>, 
        <machine-word>)) :: <string>, name: "Warning", disp-id: 5;

  /* Tidy's error message */
  constant property ITidyObject/Error (arg-i :: type-union(<integer>, 
        <machine-word>)) :: <string>, name: "Error", disp-id: 6;

  /* Tidy's comments */
  constant property ITidyObject/Comments :: <string>, name: "Comments", 
        disp-id: 7;

  /* Configuration options */
  constant property ITidyObject/Options :: <ITidyOptions>, name: "Options", 
        disp-id: 8;
end dispatch-client <ITidyObject>;


/* Dispatch interface: ITidyOptions version 0.0
 * GUID: {C7D153EE-26A9-11D4-BD8A-915594DC902D}
 * Description: ITidyOptions Interface
 */
define dispatch-client <ITidyOptions>
  uuid "{C7D153EE-26A9-11D4-BD8A-915594DC902D}";

  /* Load option settings from a configuration file */
  function ITidyOptions/Load (arg-configFile :: <string>) => (), name: 
        "Load", disp-id: 1;

  /* Reset options to default settings */
  function ITidyOptions/Reset () => (), name: "Reset", disp-id: 2;

  /* Doctype declaration generated by Tidy */
  property ITidyOptions/Doctype :: <string>, name: "Doctype", disp-id: 3;

  /* Add Tidy meta element */
  property ITidyOptions/TidyMark :: <boolean>, name: "TidyMark", disp-id: 
        4;

  /* Suppress optional end tags */
  property ITidyOptions/HideEndtags :: <boolean>, name: "HideEndtags", 
        disp-id: 5;

  /* Enclose text in BODY whitin <P>'s */
  property ITidyOptions/EncloseText :: <boolean>, name: "EncloseText", 
        disp-id: 6;

  /* Enclose text in blocks whitin <P>'s */
  property ITidyOptions/EncloseBlockText :: <boolean>, name: 
        "EncloseBlockText", disp-id: 7;

  /* New empty tags (space or comma separated list) */
  property ITidyOptions/NewEmptyTags :: <string>, name: "NewEmptyTags", 
        disp-id: 50;

  /* New inline tags (space or comma separated list) */
  property ITidyOptions/NewInlineTags :: <string>, name: "NewInlineTags", 
        disp-id: 51;

  /* New block-level tags (space or comma separated list) */
  property ITidyOptions/NewBlocklevelTags :: <string>, name: 
        "NewBlocklevelTags", disp-id: 52;

  /* New <pre>-like tags (space or comma separated list) */
  property ITidyOptions/NewPreTags :: <string>, name: "NewPreTags", 
        disp-id: 53;

  /* Replace presentational tags and attrs by style rules */
  property ITidyOptions/Clean :: <boolean>, name: "Clean", disp-id: 8;

  /* Discard <font> and <center> tags */
  property ITidyOptions/DropFontTags :: <boolean>, name: "DropFontTags", 
        disp-id: 9;

  /* Replace <i> by <em> and <b> by <strong> */
  property ITidyOptions/LogicalEmphasis :: <boolean>, name: 
        "LogicalEmphasis", disp-id: 10;

  /* Discard empty paragraphs */
  property ITidyOptions/DropEmptyParas :: <boolean>, name: 
        "DropEmptyParas", disp-id: 11;

  /* Source document is from MS Word 2000 */
  property ITidyOptions/Word2000 :: <boolean>, name: "Word2000", disp-id: 
        12;

  /* Fix bad comments */
  property ITidyOptions/FixBadComments :: <boolean>, name: 
        "FixBadComments", disp-id: 13;

  /* Replace '' in URLs by '/' */
  property ITidyOptions/FixBackslash :: <boolean>, name: "FixBackslash", 
        disp-id: 14;

  /* Default ALT text for IMG attributes */
  property ITidyOptions/AltText :: <string>, name: "AltText", disp-id: 54;

  /* Input is XML */
  property ITidyOptions/InputXml :: <boolean>, name: "InputXml", disp-id: 
        15;

  /* Output as XML */
  property ITidyOptions/OutputXml :: <boolean>, name: "OutputXml", disp-id: 
        16;

  /* Output as XHTML */
  property ITidyOptions/OutputXhtml :: <boolean>, name: "OutputXhtml", 
        disp-id: 17;

  /* Add  XML declaration */
  property ITidyOptions/AddXmlDecl :: <boolean>, name: "AddXmlDecl", 
        disp-id: 18;

  /* Assume XML processing instructions ('?>' PI terminator) */
  property ITidyOptions/AssumeXmlProcins :: <boolean>, name: 
        "AssumeXmlProcins", disp-id: 19;

  /* Add xml:space attribute as needed */
  property ITidyOptions/AddXmlSpace :: <boolean>, name: "AddXmlSpace", 
        disp-id: 61;

  /* Character encoding */
  property ITidyOptions/CharEncoding :: <CharEncoding>, name: 
        "CharEncoding", disp-id: 55;

  /* Output numeric character entities */
  property ITidyOptions/NumericEntities :: <boolean>, name: 
        "NumericEntities", disp-id: 20;

  /* Output " characters as &quot; */
  property ITidyOptions/QuoteMarks :: <boolean>, name: "QuoteMarks", 
        disp-id: 21;

  /* Output non-breaking spaces as entities */
  property ITidyOptions/QuoteNbsp :: <boolean>, name: "QuoteNbsp", disp-id: 
        22;

  /* Output unadorned & characters as &amp; */
  property ITidyOptions/QuoteAmpersand :: <boolean>, name: 
        "QuoteAmpersand", disp-id: 23;

  /* Indentation */
  property ITidyOptions/Indent :: <IndentScheme>, name: "Indent", disp-id: 
        56;

  /* Number of spaces for indentation */
  property ITidyOptions/IndentSpaces :: type-union(<integer>, 
        <machine-word>), name: "IndentSpaces", disp-id: 57;

  /* Right margin for line wrapping */
  property ITidyOptions/Wrap :: type-union(<integer>, <machine-word>), 
        name: "Wrap", disp-id: 58;

  /* Number of columns between successive tab stops */
  property ITidyOptions/TabSize :: type-union(<integer>, <machine-word>), 
        name: "TabSize", disp-id: 59;

  /* Indent attributes */
  property ITidyOptions/IndentAttributes :: <boolean>, name: 
        "IndentAttributes", disp-id: 24;

  /* Wrap attribute values */
  property ITidyOptions/WrapAttributes :: <boolean>, name: 
        "WrapAttributes", disp-id: 25;

  /* Wrap string literals in script attributes */
  property ITidyOptions/WrapScriptLiterals :: <boolean>, name: 
        "WrapScriptLiterals", disp-id: 26;

  /* Wrap lines in ASP pseudo-elements (<% ... %>) */
  property ITidyOptions/WrapAsp :: <boolean>, name: "WrapAsp", disp-id: 27;

  /* Wrap lines in JSTE pseudo-elements (<# ... #>) */
  property ITidyOptions/WrapJste :: <boolean>, name: "WrapJste", disp-id: 
        28;

  /* Wrap lines in PHP processing instructions */
  property ITidyOptions/WrapPhp :: <boolean>, name: "WrapPhp", disp-id: 29;

  /* Break before <br> */
  property ITidyOptions/BreakBeforeBr :: <boolean>, name: "BreakBeforeBr", 
        disp-id: 30;

  /* Uppercase tags */
  property ITidyOptions/UppercaseTags :: <boolean>, name: "UppercaseTags", 
        disp-id: 31;

  /* Uppercase attributes */
  property ITidyOptions/UppercaseAttributes :: <boolean>, name: 
        "UppercaseAttributes", disp-id: 32;

  /* Preserve whitespace characters within attributes */
  property ITidyOptions/LiteralAttributes :: <boolean>, name: 
        "LiteralAttributes", disp-id: 63;

  /* Suppress tidied document output */
  property ITidyOptions/Markup :: <boolean>, name: "Markup", disp-id: 33;

  /* Quiet (no 'Parsing X', guessed DTD or error summary) */
  property ITidyOptions/Quiet :: <boolean>, name: "Quiet", disp-id: 34;

  /* Show warnings */
  property ITidyOptions/ShowWarnings :: <boolean>, name: "ShowWarnings", 
        disp-id: 35;

  /* Create a sequence of slides */
  property ITidyOptions/Split :: <boolean>, name: "Split", disp-id: 36;

  /* Keep time of source file */
  property ITidyOptions/KeepTime :: <boolean>, name: "KeepTime", disp-id: 
        38;

  /* File to write errors and warnings */
  property ITidyOptions/ErrorFile :: <string>, name: "ErrorFile", disp-id: 
        60;

  /* Format error output for GNU Emacs */
  property ITidyOptions/GnuEmacs :: <boolean>, name: "GnuEmacs", disp-id: 
        62;

  function ITidyOptions/SetPtr (arg-val :: type-union(<integer>, 
        <machine-word>)) => (), name: "SetPtr", disp-id: 100;
end dispatch-client <ITidyOptions>;


/* Enumeration: CharEncoding
 */
define constant <CharEncoding> = type-union(<integer>, <machine-word>);
define constant $raw = 0;
define constant $ascii = 1;
define constant $latin1 = 2;
define constant $utf8 = 3;
define constant $iso2022 = 4;
define constant $macroman = 5;


/* Enumeration: IndentScheme
 */
define constant <IndentScheme> = type-union(<integer>, <machine-word>);
define constant $NoIndent = 0;
define constant $IndentBlocks = 1;
define constant $AutoIndent = 2;


/* COM class: TidyOptions version 0.0
 * GUID: {C7D153EF-26A9-11D4-BD8A-915594DC902D}
 * Description: TidyOptions Class
 */
define constant $TidyOptions-class-id = as(<REFCLSID>, 
        "{C7D153EF-26A9-11D4-BD8A-915594DC902D}");

define function make-TidyOptions () => (default-interface :: 
        <ITidyOptions>)
  let default-interface = make(<ITidyOptions>, class-id: 
        $TidyOptions-class-id);
  values(default-interface)
end function make-TidyOptions;
