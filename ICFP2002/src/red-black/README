Library red-black
=================

This library implements purely functional red-black trees.

Exported classes:

  <rb-tree> open abstract class

  This class is the abstract class representing red-black trees with
  arbitrary key comparison functions.

  <lt-tree> sealed concrete class

  This class implements red-black trees that use \< to compare key
  elements.

Operations:

  make(class == <rb-tree>) => (tree :: <rb-tree>)

    This call returns an instance of <lt-tree> with no elements in it.

  [open] method order(tree :: <rb-tree>) => (f :: <function>) 

    This method returns the comparison function used by the red-black
    tree. 

  method insert(tree :: <rb-tree>, key :: <object>, val :: <object>)
    => (new :: <rb-tree>)

    This method returns a new tree with the (key, val) inserted into
    it. It takes O(log N) time and space. The old tree is not modified.

  method delete(tree :: <rb-tree>, key :: <object>) => (new :: <rb-tree>)

    This method returns a new tree with the value keyed by key removed.
    It takes O(log N) time and space, and the old tree is not modified.
    If the key is not in the collection, an error is signalled.

  method min-key(tree :: <rb-tree>) => (key :: <object>)

    This method returns the key that has the smallest value in the
    collection, as defined by the comparison function returned by
    tree.order. If the tree is empty an error is signalled. This
    method takes O(log N) time.

  method max-key(tree :: <rb-tree>) => (key :: <object>)
  
    This method returns the key that has the largest value in the
    collection, as defined by the comparison function returned by
    tree.order. If the tree is empty an error is signalled. This
    method takes O(log N) time.

  method predecessor(tree :: <rb-tree>, k :: <object>) => (succ :: <object>)

    This method returns the next smallest key after k in the tree, as
    defined by tree.order. An error is signalled if tree is either empty
    or of size 1. This method takes O(log N) time.

  method successor(tree :: <rb-tree>, k :: <object>) => (succ :: <object>)

    This method returns the next largest key after k in the tree, as
    defined by tree.order. An error is signalled if tree is either empty
    or of size 1. This method takes O(log N) time.

  method a-key (tree :: <rb-tree>) => (k :: <object>)

    This method returns an arbitrary key of tree. It runs in O(1) time.
    An error is signalled if the tree is empty.

  method size(tree :: <rb-tree>) => (n :: <integer>)

    This method returns the number of key-value pairs in the collection.
    It runs in O(1) time.

  method element(tree :: <rb-tree>, k :: <object>, #key default :: <object>)
    => (val :: <object>)

    This method returns the value keyed by k in the collection tree. If
    k is not in the collection, then default: is returned if it is supplied,
    and an error is signalled otherwise. This method takes O(log N) time.

  method forward-iteration-protocol(tree :: <rb-tree>) => (...)

    This method is used to iterate over the keys and values of tree.
    It takes O(log N) space, and generates the whole collection in
    O(N) time. (It takes O(log N) time to generate the first element.)
    The elements are generated in key order, from smallest to largest,
    as defined by tree.order.

  method backward-iteration-protocol(tree :: <rb-tree>) => (...)

    This method is used to iterate over the keys and values of tree.
    It takes O(log N) space, and generates the whole collection in
    O(N) time. (It takes O(log N) time to generate the first element.)
    The elements are generated in reverse key order, from largest to
    smallest, as defined by tree.order.

  method type-for-copy(tree :: <lt-tree>) => (type :: <type>)

    This method on <lt-tree> returns <equal-table>, since <rb-tree>
    is an immutable collection. An unchecked assumption is that
    the \< and \= functions represent a compatible ordering. (Ie,
    if a < b & b < a, then a = b.) 

Extending <rb-tree>

  In order to define your own red-black trees with their own
  comparison functions, you need to subclass <rb-tree>, and
  define an appropriate method on compare(). You should also
  define a method on type-for-copy, since <rb-tree> is an
  immutable collection.

  For example, the following code defines a red-black tree that is
  keyed by strings, which are compared in a (very inefficient)
  case-insensitive way:

    define class <case-folding-rb-tree> (<rb-tree>)
    end class;

    define method order (tree :: <case-folding-rb-tree>) => (f :: <function>)
      local method cmp (s-1 :: <string>, s-2 :: <string>) => (ans :: <boolean>)
        s-1.as-lowercase < s-2.as-lowercase
      end method cmp;
      //
      cmp
    end method order;

    define method type-for-copy (t :: <case-folding-rb-tree>) => (t :: <type>)
      <case-insensitive-string-table>
    end method type-for-copy;

Copyright Trivia:

  This software, and associated documentation, is all in the public
  domain.

  While you are free to do as you like with this code, I'd appreciate
  it if you mentioned Neel Krishnaswami <neelk@alum.mit.edu> as the
  author.
